# This file is automatically generated from cmake.toml - DO NOT EDIT
# See https://github.com/build-cpp/cmkr for more information

cmake_minimum_required(VERSION 3.15)

# Regenerate CMakeLists.txt automatically in the root project
set(CMKR_ROOT_PROJECT OFF)
if(CMAKE_CURRENT_SOURCE_DIR STREQUAL CMAKE_SOURCE_DIR)
	set(CMKR_ROOT_PROJECT ON)

	# Bootstrap cmkr
	include(cmkr.cmake OPTIONAL RESULT_VARIABLE CMKR_INCLUDE_RESULT)
	if(CMKR_INCLUDE_RESULT)
		cmkr()
	endif()

	# Enable folder support
	set_property(GLOBAL PROPERTY USE_FOLDERS ON)
endif()

# Create a configure-time dependency on cmake.toml to improve IDE support
if(CMKR_ROOT_PROJECT)
	configure_file(cmake.toml cmake.toml COPYONLY)
endif()

include(vcpkg_config.cmake)

project(Outrospection)

if(CMKR_ROOT_PROJECT AND NOT CMKR_DISABLE_VCPKG)
	include(FetchContent)
	message(STATUS "Fetching vcpkg...")
	FetchContent_Declare(vcpkg URL "https://github.com/microsoft/vcpkg/archive/refs/tags/2021.05.12.tar.gz")
	FetchContent_MakeAvailable(vcpkg)
	include("${vcpkg_SOURCE_DIR}/scripts/buildsystems/vcpkg.cmake")
endif()

# Packages
find_package(glad REQUIRED CONFIG)

find_package(glfw3 REQUIRED CONFIG)

find_package(FreeType REQUIRED CONFIG)

# Target Outrospection
set(CMKR_TARGET Outrospection)
set(Outrospection_SOURCES "")

list(APPEND Outrospection_SOURCES
	"src/Bounds.cpp"
	"src/Controller.cpp"
	"src/Core/AudioManager.cpp"
	"src/Core/LayerStack.cpp"
	"src/Core/Rendering/Resource.cpp"
	"src/Core/Rendering/Shader.cpp"
	"src/Core/Rendering/SimpleTexture.cpp"
	"src/Core/Rendering/TextureManager.cpp"
	"src/Core/Rendering/TickableTexture.cpp"
	"src/Core/UI/GUIControlsOverlay.cpp"
	"src/Core/UI/GUILayer.cpp"
	"src/Core/UI/GUIOctopusOverlay.cpp"
	"src/Core/UI/GUIPause.cpp"
	"src/Core/UI/GUIScene.cpp"
	"src/Core/UI/GUIWelcome.cpp"
	"src/Core/UI/GUIWinOverlay.cpp"
	"src/Core/UI/UIButton.cpp"
	"src/Core/UI/UIComponent.cpp"
	"src/External/miniaudio.cpp"
	"src/External/stb_image.cpp"
	"src/KeyBinding.cpp"
	"src/Outrospection.cpp"
	"src/Source.cpp"
	"src/Util.cpp"
)

list(APPEND Outrospection_SOURCES
	cmake.toml
)

set(CMKR_SOURCES ${Outrospection_SOURCES})
add_executable(Outrospection)

if(Outrospection_SOURCES)
	target_sources(Outrospection PRIVATE ${Outrospection_SOURCES})
endif()

get_directory_property(CMKR_VS_STARTUP_PROJECT DIRECTORY ${PROJECT_SOURCE_DIR} DEFINITION VS_STARTUP_PROJECT)
if(NOT CMKR_VS_STARTUP_PROJECT)
	set_property(DIRECTORY ${PROJECT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT Outrospection)
endif()

source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${Outrospection_SOURCES})

target_compile_features(Outrospection PRIVATE
	cxx_std_20
)

if(CMAKE_CXX_COMPILER_ID MATCHES "Clang") # clang
	target_compile_options(Outrospection PRIVATE
		-Wno-volatile
	)
endif()

if(CMAKE_CXX_COMPILER_ID STREQUAL "GNU") # gcc
	target_compile_options(Outrospection PRIVATE
		-Wno-volatile
	)
endif()

if(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC") # msvc
endif()

target_include_directories(Outrospection PRIVATE
	src
	"Libraries/include"
)

target_link_libraries(Outrospection PRIVATE
	glad::glad
	glfw
	freetype
)

if(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC") # msvc
	target_link_options(Outrospection PRIVATE
		"/SUBSYSTEM:WINDOWS"
	)
endif()

unset(CMKR_TARGET)
unset(CMKR_SOURCES)

